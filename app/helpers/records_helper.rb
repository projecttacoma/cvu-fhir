module RecordsHelper
  CV_POPULATION_KEYS = %w[IPP MSRPOPL MSRPOPLEX OBSERV].freeze
  PROPORTION_POPULATION_KEYS = %w[IPP DENOM NUMER DENEX DENEXCEP].freeze
  POPULATION_MAP = { 'IPP' => 'initial-population',
                     'DENOM' => 'denominator',
                     'NUMER' => 'numerator',
                     'DENEX' => 'denominator-exclusion',
                     'DENEXCEP' => 'denominator-exception',
                     'MSRPOPL' => 'measure-population',
                     'MSRPOPLEX' => 'measure-population-exclusion',
                     'OBSERV' => 'measure-observation' }.freeze

  def full_name(patient)
    patient.givenNames.join(' ') + ' ' + patient.familyName if patient
  end

  # { display_name: '', populations: {} }
  def group_calculation_results(measure_report)
    grouped_results = []
    measure_report.group.each do |population_group|
      grouped_results << { display_name: population_group.id, populations: population_group.population }
      population_group.stratifier.each do |stratifier|
        grouped_results << { display_name: stratifier.code[0].text, populations: stratifier.stratum[0].population }
      end
    end
    grouped_results
  end

  # This method takes a set of result values (as generated by get_result_values)
  # and merges all of the values down to
  # Example input:
  #  {BSON::ObjectId('1')=>{"IPP"=>1, "DENOM"=>0, "DENEX"=>0, "NUMER"=>0, "DENEXCEP"=>0},
  #  BSON::ObjectId('2')=>{"IPP"=>1, "DENOM"=>0, "DENEX"=>0, "NUMER"=>0, "DENEXCEP"=>0},
  #  BSON::ObjectId('3')=>{"IPP"=>1, "DENOM"=>0, "DENEX"=>0, "NUMER"=>0, "DENEXCEP"=>0},}
  #
  # Example output:
  # {"IPP"=>3, "DENOM"=>0, "DENEX"=>0, "NUMER"=>0, "DENEXCEP"=>0}
  def pop_sums(result_values)
    result_values.values.inject do |sum, next_elem|
      sum.merge(next_elem) { |_, key1, key2| key1 + key2 }
    end
  end

  def hide_patient_calculation?
    # Hide measure calculation if Cypress is in ATL Mode and the current user is not an ATL or admin
    Settings.current.mode_atl? && (!current_user.user_role?('admin') && !current_user.user_role?('atl'))
  end

  def population_label(bundle, pop)
    bundle.modified_population_labels && bundle.modified_population_labels[pop] ? bundle.modified_population_labels[pop] : pop
  end

  # TODO: HTML Zip
  # creates a folder with html patient files and zipped html patient files
  # def html_zip(patients, temp_path, name)
  #   path = Rails.root.join(temp_path, Time.now.in_time_zone.getutc.to_s)
  #   FileUtils.mkdir_p(path)

  #   mes, sd, ed = Cypress::PatientZipper.measure_start_end(patients)
  #   formatter = Cypress::HTMLExporter.new(mes, sd, ed)
  #   patients.each do |r|
  #     filename = "#{r.first_names}_#{r.familyName}.html".delete("'").tr(' ', '_')
  #     File.open(File.join(path, filename), 'w') do |f|
  #       f.write(formatter.export(r))
  #     end
  #   end
  #   zfg = ZipFileGenerator.new(path, Rails.root.join(temp_path, name))
  #   zfg.write
  # end
end
